{"ast":null,"code":"// import React, { useState } from 'react';\n// import { Container, TextField, Button, Typography, Box } from '@mui/material';\n// import { styled } from '@mui/system';\n// import logo from '../assets/LogoPrincipal.png';\n// import { useNavigate } from 'react-router-dom';\n\n// const CircularLogo = styled('img')({\n//     width: '350px',\n//     height: '200px',\n//     borderRadius: '50%',\n//     display: 'block',\n//     margin: '0 auto',\n// });\n\n// const Login = () => {\n//     const [usuario, setUsuario] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [errors, setErrors] = useState({});\n//     const navigate = useNavigate();\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n\n//         const newErrors = {};\n//         if (!usuario) newErrors.usuario = 'El usuario es requerido';\n//         if (!password) newErrors.password = 'La contraseña es requerida';\n\n//         if (Object.keys(newErrors).length > 0) {\n//             setErrors(newErrors);\n//             return;\n//         }\n\n//         try {\n//             const response = await fetch('http://localhost:5000/api/auth/login', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ username: usuario, password }),\n//             });\n\n//             if (!response.ok) {\n//                 const errorData = await response.json();\n//                 setErrors({\n//                     submit: errorData.errors ? errorData.errors.map(err => err.msg).join(', ') : errorData.msg || 'Error en la conexión.'\n//                 });\n//                 return;\n//             }\n\n//             const data = await response.json();\n//             localStorage.setItem('token', data.token); // Almacena el token\n//             navigate('/dashboard'); // Redirigir al dashboard\n\n//         } catch (error) {\n//             console.error('Error en la conexión:', error);\n//             setErrors({ submit: 'Error en la conexión. Inténtalo más tarde.' });\n//         }\n//     };\n\n//     return (\n//         <Container maxWidth=\"xs\" sx={{ mt: 8 }}>\n//             <CircularLogo src={logo} alt=\"Logo\" />\n//             <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//                 Iniciar Sesión\n//             </Typography>\n//             <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n//                 <TextField\n//                     required\n//                     fullWidth\n//                     label=\"Usuario\"\n//                     margin=\"normal\"\n//                     value={usuario}\n//                     onChange={(e) => {\n//                         setUsuario(e.target.value);\n//                         if (errors.usuario) {\n//                             setErrors({ ...errors, usuario: undefined });\n//                         }\n//                     }}\n//                     error={Boolean(errors.usuario)}\n//                     helperText={errors.usuario}\n//                 />\n//                 <TextField\n//                     required\n//                     fullWidth\n//                     label=\"Contraseña\"\n//                     type=\"password\"\n//                     margin=\"normal\"\n//                     value={password}\n//                     onChange={(e) => {\n//                         setPassword(e.target.value);\n//                         if (errors.password) {\n//                             setErrors({ ...errors, password: undefined });\n//                         }\n//                     }}\n//                     error={Boolean(errors.password)}\n//                     helperText={errors.password}\n//                 />\n//                 {errors.submit && <Typography color=\"error\">{errors.submit}</Typography>}\n//                 <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n//                     Iniciar Sesión\n//                 </Button>\n//             </Box>\n//         </Container>\n//     );\n// };\n\n// export default Login;","map":{"version":3,"names":[],"sources":["C:/Users/Administrador/Documents/Proyectos/control_calidad/frontend/src/pages/Login.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Container, TextField, Button, Typography, Box } from '@mui/material';\r\n// import { styled } from '@mui/system';\r\n// import logo from '../assets/LogoPrincipal.png';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const CircularLogo = styled('img')({\r\n//     width: '350px',\r\n//     height: '200px',\r\n//     borderRadius: '50%',\r\n//     display: 'block',\r\n//     margin: '0 auto',\r\n// });\r\n\r\n// const Login = () => {\r\n//     const [usuario, setUsuario] = useState('');\r\n//     const [password, setPassword] = useState('');\r\n//     const [errors, setErrors] = useState({});\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n\r\n//         const newErrors = {};\r\n//         if (!usuario) newErrors.usuario = 'El usuario es requerido';\r\n//         if (!password) newErrors.password = 'La contraseña es requerida';\r\n\r\n//         if (Object.keys(newErrors).length > 0) {\r\n//             setErrors(newErrors);\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await fetch('http://localhost:5000/api/auth/login', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ username: usuario, password }),\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 const errorData = await response.json();\r\n//                 setErrors({\r\n//                     submit: errorData.errors ? errorData.errors.map(err => err.msg).join(', ') : errorData.msg || 'Error en la conexión.'\r\n//                 });\r\n//                 return;\r\n//             }\r\n\r\n//             const data = await response.json();\r\n//             localStorage.setItem('token', data.token); // Almacena el token\r\n//             navigate('/dashboard'); // Redirigir al dashboard\r\n\r\n//         } catch (error) {\r\n//             console.error('Error en la conexión:', error);\r\n//             setErrors({ submit: 'Error en la conexión. Inténtalo más tarde.' });\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <Container maxWidth=\"xs\" sx={{ mt: 8 }}>\r\n//             <CircularLogo src={logo} alt=\"Logo\" />\r\n//             <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n//                 Iniciar Sesión\r\n//             </Typography>\r\n//             <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\r\n//                 <TextField\r\n//                     required\r\n//                     fullWidth\r\n//                     label=\"Usuario\"\r\n//                     margin=\"normal\"\r\n//                     value={usuario}\r\n//                     onChange={(e) => {\r\n//                         setUsuario(e.target.value);\r\n//                         if (errors.usuario) {\r\n//                             setErrors({ ...errors, usuario: undefined });\r\n//                         }\r\n//                     }}\r\n//                     error={Boolean(errors.usuario)}\r\n//                     helperText={errors.usuario}\r\n//                 />\r\n//                 <TextField\r\n//                     required\r\n//                     fullWidth\r\n//                     label=\"Contraseña\"\r\n//                     type=\"password\"\r\n//                     margin=\"normal\"\r\n//                     value={password}\r\n//                     onChange={(e) => {\r\n//                         setPassword(e.target.value);\r\n//                         if (errors.password) {\r\n//                             setErrors({ ...errors, password: undefined });\r\n//                         }\r\n//                     }}\r\n//                     error={Boolean(errors.password)}\r\n//                     helperText={errors.password}\r\n//                 />\r\n//                 {errors.submit && <Typography color=\"error\">{errors.submit}</Typography>}\r\n//                 <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n//                     Iniciar Sesión\r\n//                 </Button>\r\n//             </Box>\r\n//         </Container>\r\n//     );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}