{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\Proyectos\\\\control_calidad\\\\frontend\\\\src\\\\components\\\\DashboardChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { jwtDecode } from 'jwt-decode';\n\n// Registrar las partes necesarias de Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nconst DashboardCharts = () => {\n  _s();\n  const [proyectos, setProyectos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const token = localStorage.getItem('token');\n  const isAuthenticated = Boolean(token);\n  const fetchProyectos = useCallback(async () => {\n    if (!isAuthenticated) return;\n    const decoded = jwtDecode(token);\n    const id = decoded.user.id;\n    try {\n      // Hacer una solicitud GET a la API para obtener los proyectos\n      const response = await axios.get(`http://localhost:5000/api/grafica/VencimientoProyecto/${id}`);\n      const {\n        labels,\n        datasets\n      } = response.data;\n\n      // Guardar los datos de los proyectos\n      setProyectos({\n        labels,\n        datasets\n      });\n      setLoading(false);\n    } catch (error) {\n      console.error('Error al obtener los proyectos:', error);\n      setLoading(false);\n    }\n  }, [isAuthenticated, token]);\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchProyectos();\n    }\n  }, [isAuthenticated, fetchProyectos]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 25\n  }, this);\n\n  // Procesar los proyectos para determinar los vencidos y no vencidos\n  const vencidos = proyectos.labels.filter(date => new Date(date) < new Date()).length;\n  const noVencidos = proyectos.labels.length - vencidos;\n\n  // Preparar los datos para el gráfico de pastel\n  const chartData = {\n    labels: ['Vencidos', 'No Vencidos'],\n    datasets: [{\n      data: [vencidos, noVencidos],\n      backgroundColor: ['#FF0000', '#00FF00'],\n      // Rojo para vencidos, verde para no vencidos\n      borderColor: ['#FF0000', '#00FF00'],\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Proyectos: Vencidos vs No Vencidos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pie, {\n      data: chartData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          tooltip: {\n            callbacks: {\n              label: tooltipItem => {\n                const status = tooltipItem.raw === 1 ? 'Proyecto vencido' : 'Proyecto no vencido';\n                return `${status}: ${tooltipItem.raw} proyecto(s)`;\n              }\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(DashboardCharts, \"zyXFjyp3nqU+q0hF3T7yAyatDTk=\");\n_c = DashboardCharts;\nexport default DashboardCharts;\nvar _c;\n$RefreshReg$(_c, \"DashboardCharts\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","axios","Pie","Chart","ChartJS","ArcElement","Tooltip","Legend","jwtDecode","jsxDEV","_jsxDEV","register","DashboardCharts","_s","proyectos","setProyectos","loading","setLoading","token","localStorage","getItem","isAuthenticated","Boolean","fetchProyectos","decoded","id","user","response","get","labels","datasets","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","vencidos","filter","date","Date","length","noVencidos","chartData","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","position","tooltip","callbacks","label","tooltipItem","status","raw","_c","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/Proyectos/control_calidad/frontend/src/components/DashboardChart.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport {\r\n    Chart as ChartJS,\r\n    ArcElement,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// Registrar las partes necesarias de Chart.js\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst DashboardCharts = () => {\r\n    const [proyectos, setProyectos] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const token = localStorage.getItem('token');\r\n    const isAuthenticated = Boolean(token);\r\n\r\n    const fetchProyectos = useCallback(async () => {\r\n        if (!isAuthenticated) return;\r\n\r\n        const decoded = jwtDecode(token);\r\n        const id = decoded.user.id;\r\n\r\n        try {\r\n            // Hacer una solicitud GET a la API para obtener los proyectos\r\n            const response = await axios.get(`http://localhost:5000/api/grafica/VencimientoProyecto/${id}`);\r\n            const { labels, datasets } = response.data;\r\n\r\n            // Guardar los datos de los proyectos\r\n            setProyectos({ labels, datasets });\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error('Error al obtener los proyectos:', error);\r\n            setLoading(false);\r\n        }\r\n    }, [isAuthenticated, token]);\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            fetchProyectos();\r\n        }\r\n    }, [isAuthenticated, fetchProyectos]);\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n\r\n    // Procesar los proyectos para determinar los vencidos y no vencidos\r\n    const vencidos = proyectos.labels.filter((date) => new Date(date) < new Date()).length;\r\n    const noVencidos = proyectos.labels.length - vencidos;\r\n\r\n    // Preparar los datos para el gráfico de pastel\r\n    const chartData = {\r\n        labels: ['Vencidos', 'No Vencidos'],\r\n        datasets: [\r\n            {\r\n                data: [vencidos, noVencidos],\r\n                backgroundColor: ['#FF0000', '#00FF00'], // Rojo para vencidos, verde para no vencidos\r\n                borderColor: ['#FF0000', '#00FF00'],\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Proyectos: Vencidos vs No Vencidos</h2>\r\n            <Pie data={chartData} options={{\r\n                responsive: true,\r\n                plugins: {\r\n                    legend: {\r\n                        position: 'top',\r\n                    },\r\n                    tooltip: {\r\n                        callbacks: {\r\n                            label: (tooltipItem) => {\r\n                                const status = tooltipItem.raw === 1 ? 'Proyecto vencido' : 'Proyecto no vencido';\r\n                                return `${status}: ${tooltipItem.raw} proyecto(s)`;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            }} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardCharts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}