{"ast":null,"code":"// import jwtDecode from 'jwt-decode';\n\n// // Función que obtiene el nombre de usuario desde el token\n// export const getUserFromToken = () => {\n//     const token = localStorage.getItem('authToken'); // Asegúrate de almacenar el token en localStorage cuando el usuario inicie sesión\n//     if (token) {\n//         const decodedToken = jwtDecode(token);\n//         return decodedToken.user.username; // Extrae el nombre de usuario del token\n//     }\n//     return null;\n// };\n\n// frontend/src/utils/auth.js\n\n// Esta función recupera el token desde el localStorage\nexport const getAuthToken = () => {\n  // Recuperamos el token del localStorage\n  return localStorage.getItem('token'); // Asumimos que el token se guarda con la clave 'token'\n};\n\n// Esta función verifica si el token está presente y es válido (si se encuentra en localStorage)\nexport const isAuthenticated = () => {\n  const token = getAuthToken();\n  // Aquí puedes agregar más validaciones si es necesario, por ejemplo, verificar que el token no haya expirado\n  return !!token; // Retorna true si el token existe\n};\n\n// Esta función puede ser utilizada para eliminar el token (cerrar sesión)\nexport const logout = () => {\n  localStorage.removeItem('token');\n};","map":{"version":3,"names":["getAuthToken","localStorage","getItem","isAuthenticated","token","logout","removeItem"],"sources":["C:/Users/Administrador/Documents/Proyectos/control_calidad/frontend/src/utils/auth.js"],"sourcesContent":["// import jwtDecode from 'jwt-decode';\r\n\r\n// // Función que obtiene el nombre de usuario desde el token\r\n// export const getUserFromToken = () => {\r\n//     const token = localStorage.getItem('authToken'); // Asegúrate de almacenar el token en localStorage cuando el usuario inicie sesión\r\n//     if (token) {\r\n//         const decodedToken = jwtDecode(token);\r\n//         return decodedToken.user.username; // Extrae el nombre de usuario del token\r\n//     }\r\n//     return null;\r\n// };\r\n\r\n// frontend/src/utils/auth.js\r\n\r\n// Esta función recupera el token desde el localStorage\r\nexport const getAuthToken = () => {\r\n    // Recuperamos el token del localStorage\r\n    return localStorage.getItem('token'); // Asumimos que el token se guarda con la clave 'token'\r\n};\r\n\r\n// Esta función verifica si el token está presente y es válido (si se encuentra en localStorage)\r\nexport const isAuthenticated = () => {\r\n    const token = getAuthToken();\r\n    // Aquí puedes agregar más validaciones si es necesario, por ejemplo, verificar que el token no haya expirado\r\n    return !!token; // Retorna true si el token existe\r\n};\r\n\r\n// Esta función puede ser utilizada para eliminar el token (cerrar sesión)\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAGA,CAAA,KAAM;EAC9B;EACA,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACjC,MAAMC,KAAK,GAAGJ,YAAY,CAAC,CAAC;EAC5B;EACA,OAAO,CAAC,CAACI,KAAK,CAAC,CAAC;AACpB,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACxBJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}