{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\Proyectos\\\\control_calidad\\\\frontend\\\\src\\\\components\\\\DashboardChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { Gantt } from '@dhtmlx/react-gantt'; // Importar el componente de Gantt\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardCharts = () => {\n  _s();\n  const [proyectos, setProyectos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const token = localStorage.getItem('token');\n  const isAuthenticated = Boolean(token);\n  const fetchProyectos = useCallback(async () => {\n    if (!isAuthenticated) return;\n    const decoded = jwtDecode(token);\n    const id = decoded.user.id;\n    try {\n      // Hacer una solicitud GET a la API para obtener los proyectos\n      const response = await axios.get(`http://localhost:5000/api/grafica/VencimientoProyecto/${id}`);\n      const {\n        labels,\n        datasets\n      } = response.data;\n\n      // Obtener las fechas de inicio y vencimiento de los proyectos\n      const ganttData = labels.map((date, index) => {\n        const endDate = new Date(date);\n        const startDate = new Date();\n\n        // Calcular el color en función de si ya está vencido\n        const status = new Date() > endDate ? 'vencido' : 'activo';\n        const color = status === 'vencido' ? '#FF0000' : '#00FF00';\n        return {\n          id: index + 1,\n          text: datasets[index],\n          // Nombre del proyecto\n          start_date: startDate,\n          // Fecha de inicio (puedes ajustar según la fecha real de inicio del proyecto)\n          end_date: endDate,\n          // Fecha de vencimiento\n          color: color,\n          // Color de la barra según el estado\n          status: status // Estado del proyecto\n        };\n      });\n      setProyectos(ganttData);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error al obtener los proyectos:', error);\n      setLoading(false);\n    }\n  }, [isAuthenticated, token]);\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchProyectos();\n    }\n  }, [isAuthenticated, fetchProyectos]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 25\n  }, this);\n\n  // Configuración básica del gráfico de Gantt\n  const ganttConfig = {\n    scale_unit: 'day',\n    // Escala de tiempo por día\n    date_format: '%Y-%m-%d',\n    // Formato de fecha\n    min_column_width: 30,\n    // Ancho mínimo de las columnas\n    grid_width: 300 // Ancho de la cuadrícula\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Proyectos Pr\\xF3ximos a Vencer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Gantt, {\n      tasks: {\n        data: proyectos,\n        // Datos de los proyectos\n        links: [] // Enlace vacío, por ahora no necesitamos enlaces entre tareas\n      },\n      columns: [{\n        name: 'text',\n        label: 'Proyecto',\n        width: '*',\n        tree: true\n      },\n      // Columna para los nombres de los proyectos\n      {\n        name: 'start_date',\n        label: 'Fecha de inicio',\n        width: 100\n      },\n      // Columna para la fecha de inicio\n      {\n        name: 'end_date',\n        label: 'Fecha de vencimiento',\n        width: 100\n      },\n      // Columna para la fecha de vencimiento\n      {\n        name: 'status',\n        label: 'Estado',\n        width: 100\n      } // Columna para el estado\n      ],\n      config: ganttConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(DashboardCharts, \"zyXFjyp3nqU+q0hF3T7yAyatDTk=\");\n_c = DashboardCharts;\nexport default DashboardCharts;\nvar _c;\n$RefreshReg$(_c, \"DashboardCharts\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","axios","Gantt","jwtDecode","jsxDEV","_jsxDEV","DashboardCharts","_s","proyectos","setProyectos","loading","setLoading","token","localStorage","getItem","isAuthenticated","Boolean","fetchProyectos","decoded","id","user","response","get","labels","datasets","data","ganttData","map","date","index","endDate","Date","startDate","status","color","text","start_date","end_date","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","ganttConfig","scale_unit","date_format","min_column_width","grid_width","tasks","links","columns","name","label","width","tree","config","_c","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/Proyectos/control_calidad/frontend/src/components/DashboardChart.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { Gantt } from '@dhtmlx/react-gantt'; // Importar el componente de Gantt\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst DashboardCharts = () => {\r\n    const [proyectos, setProyectos] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const token = localStorage.getItem('token');\r\n    const isAuthenticated = Boolean(token);\r\n\r\n    const fetchProyectos = useCallback(async () => {\r\n        if (!isAuthenticated) return;\r\n\r\n        const decoded = jwtDecode(token);\r\n        const id = decoded.user.id;\r\n\r\n        try {\r\n            // Hacer una solicitud GET a la API para obtener los proyectos\r\n            const response = await axios.get(`http://localhost:5000/api/grafica/VencimientoProyecto/${id}`);\r\n            const { labels, datasets } = response.data;\r\n\r\n            // Obtener las fechas de inicio y vencimiento de los proyectos\r\n            const ganttData = labels.map((date, index) => {\r\n                const endDate = new Date(date);\r\n                const startDate = new Date();\r\n\r\n                // Calcular el color en función de si ya está vencido\r\n                const status = new Date() > endDate ? 'vencido' : 'activo';\r\n                const color = status === 'vencido' ? '#FF0000' : '#00FF00';\r\n\r\n                return {\r\n                    id: index + 1,\r\n                    text: datasets[index],  // Nombre del proyecto\r\n                    start_date: startDate,  // Fecha de inicio (puedes ajustar según la fecha real de inicio del proyecto)\r\n                    end_date: endDate,      // Fecha de vencimiento\r\n                    color: color,           // Color de la barra según el estado\r\n                    status: status,         // Estado del proyecto\r\n                };\r\n            });\r\n\r\n            setProyectos(ganttData);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error('Error al obtener los proyectos:', error);\r\n            setLoading(false);\r\n        }\r\n    }, [isAuthenticated, token]);\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            fetchProyectos();\r\n        }\r\n    }, [isAuthenticated, fetchProyectos]);\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n\r\n    // Configuración básica del gráfico de Gantt\r\n    const ganttConfig = {\r\n        scale_unit: 'day',        // Escala de tiempo por día\r\n        date_format: '%Y-%m-%d',  // Formato de fecha\r\n        min_column_width: 30,     // Ancho mínimo de las columnas\r\n        grid_width: 300,          // Ancho de la cuadrícula\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Proyectos Próximos a Vencer</h2>\r\n            <Gantt\r\n                tasks={{\r\n                    data: proyectos,  // Datos de los proyectos\r\n                    links: []         // Enlace vacío, por ahora no necesitamos enlaces entre tareas\r\n                }}\r\n                columns={[\r\n                    { name: 'text', label: 'Proyecto', width: '*', tree: true }, // Columna para los nombres de los proyectos\r\n                    { name: 'start_date', label: 'Fecha de inicio', width: 100 }, // Columna para la fecha de inicio\r\n                    { name: 'end_date', label: 'Fecha de vencimiento', width: 100 }, // Columna para la fecha de vencimiento\r\n                    { name: 'status', label: 'Estado', width: 100 }  // Columna para el estado\r\n                ]}\r\n                config={ganttConfig}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardCharts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}