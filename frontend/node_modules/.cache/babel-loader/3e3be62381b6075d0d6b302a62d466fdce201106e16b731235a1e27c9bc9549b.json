{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\Proyectos\\\\control_calidad\\\\frontend\\\\src\\\\pages\\\\Proyectos\\\\Hitos.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, TextField, Button, Grid, Typography, MenuItem, Select, InputLabel } from '@mui/material';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport AlertMessage from '../../components/AlertMessage'; // Importar el componente de alerta\nimport { isAuthenticated } from '../../utils/auth'; // Importar la función isAuthenticated\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CrearPlanDePrueba = () => {\n  _s();\n  const [showAlert, setShowAlert] = useState(null); // Estado de la alerta\n  const [hitos, setHitos] = useState([]); // Inicializar como array vacío\n  const [criterioAceptacion, setCriterioAceptacion] = useState('');\n  const [estadoPrueba, setEstadoPrueba] = useState('');\n  const [estadonuevoHito, serEstadonuevoHito] = useState('');\n  const [imagenPrueba, setImagenPrueba] = useState(null); // Estado para el archivo de imagen\n  const [hitoSeleccionado, setHitoSeleccionado] = useState(''); // Valor vacío como predeterminado\n  const [descripcionHito, setDescripcionHito] = useState(''); // Descripción del hito\n  const [formularioHabilitado, setFormularioHabilitado] = useState(false); // Estado para habilitar solo los campos debajo del primer botón\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams(); // Obtener el ID del proyecto desde la URL\n\n  const alertRef = useRef(null); // Crear una referencia para la alerta\n\n  // Verificar si el usuario está autenticado al cargar el componente\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      navigate('/login'); // Redirige al login si no está autenticado\n    }\n  }, [navigate]);\n\n  // Obtener los hitos de la API\n  useEffect(() => {\n    const fetchHitos = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/pruebas/hitosporPruebas/${id}`);\n        setHitos(response.data || []); // Asegúrate de que siempre sea un array\n      } catch (error) {\n        console.error('Error al obtener los hitos:', error);\n        setShowAlert({\n          severity: 'error',\n          message: 'Hubo un error al cargar los hitos del proyecto.'\n        });\n      }\n    };\n    if (id) {\n      fetchHitos();\n    }\n  }, [id]);\n\n  // Función para manejar el envío del formulario\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!hitoSeleccionado || !resultadoEsperado || !pruebaRealizada || !estadoPrueba || !criterioAceptacion) {\n      setShowAlert({\n        severity: 'error',\n        message: 'Todos los campos del plan de prueba son obligatorios.'\n      });\n      return;\n    }\n    const planDePrueba = {\n      hitoSeleccionado,\n      estadonuevoHito,\n      resultadoEsperado,\n      pruebaRealizada,\n      estadoPrueba,\n      criterioAceptacion,\n      imagenPrueba // Aquí se envía como Base64\n    };\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setShowAlert({\n          severity: 'error',\n          message: 'No se encontró el token de autenticación.'\n        });\n        return;\n      }\n      const config = {\n        headers: {\n          'x-auth-token': token,\n          'Content-Type': 'application/json' // Asegúrate de usar JSON\n        }\n      };\n      const response = await axios.post(`http://localhost:5000/api/pruebas/registerPrueba/${id}`, planDePrueba, config);\n      if (response.data.msg) {\n        setShowAlert({\n          severity: 'success',\n          message: response.data.msg\n        });\n        setTimeout(() => navigate('/proyectos/tareas'), 2000);\n      }\n    } catch (error) {\n      console.error('Error al crear el plan de prueba:', error.response || error);\n      if (error.response && error.response.data && error.response.data.errors) {\n        const errorMessages = error.response.data.errors.map(err => err.msg).join(', ');\n        setShowAlert({\n          severity: 'error',\n          message: errorMessages\n        });\n      } else {\n        setShowAlert({\n          severity: 'error',\n          message: 'Hubo un error al crear el plan de prueba. Inténtalo de nuevo.'\n        });\n      }\n    } finally {\n      // Desplazar la vista hacia la alerta\n      if (alertRef.current) {\n        alertRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // Habilitar solo los campos debajo del primer botón\n  const handleEnableForm = () => {\n    setFormularioHabilitado(true);\n  };\n\n  // Manejar la selección de un hito\n  const handleHitoSeleccionado = async e => {\n    const hitoId = e.target.value;\n    setHitoSeleccionado(hitoId);\n\n    // Obtener la descripción del hito seleccionado\n    const hito = hitos.find(hito => hito.id_hito === hitoId);\n    if (hito) {\n      setDescripcionHito(hito.descripcion);\n    } else {\n      setDescripcionHito('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: alertRef,\n      children: showAlert && /*#__PURE__*/_jsxDEV(AlertMessage, {\n        severity: showAlert.severity,\n        message: showAlert.message,\n        autoHideDuration: 2000,\n        sx: {\n          mb: 4\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      align: \"center\",\n      children: \"Test Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        mt: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 12,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Selecciona un Hito\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            fullWidth: true,\n            value: hitoSeleccionado,\n            onChange: handleHitoSeleccionado,\n            displayEmpty: true // Para mostrar el placeholder aunque no se haya seleccionado nada\n            ,\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              disabled: true,\n              children: \"Selecciona un hito...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this), \" \", hitos.map(hito => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: hito.id_hito,\n              children: hito.nombre_hito\n            }, hito.id_hito, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Descripci\\xF3n del Plan de Prueba\",\n            value: descripcionHito,\n            disabled: true,\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            fullWidth: true,\n            onClick: handleEnableForm,\n            children: \"Ver casos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(CrearPlanDePrueba, \"g1q1W4cm3McAYQ3lh5Z/s02xuzs=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = CrearPlanDePrueba;\nexport default CrearPlanDePrueba;\nvar _c;\n$RefreshReg$(_c, \"CrearPlanDePrueba\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","TextField","Button","Grid","Typography","MenuItem","Select","InputLabel","useNavigate","useParams","axios","AlertMessage","isAuthenticated","jsxDEV","_jsxDEV","CrearPlanDePrueba","_s","showAlert","setShowAlert","hitos","setHitos","criterioAceptacion","setCriterioAceptacion","estadoPrueba","setEstadoPrueba","estadonuevoHito","serEstadonuevoHito","imagenPrueba","setImagenPrueba","hitoSeleccionado","setHitoSeleccionado","descripcionHito","setDescripcionHito","formularioHabilitado","setFormularioHabilitado","navigate","id","alertRef","fetchHitos","response","get","data","error","console","severity","message","handleSubmit","e","preventDefault","resultadoEsperado","pruebaRealizada","planDePrueba","token","localStorage","getItem","config","headers","post","msg","setTimeout","errors","errorMessages","map","err","join","current","scrollIntoView","behavior","handleEnableForm","handleHitoSeleccionado","hitoId","target","value","hito","find","id_hito","descripcion","sx","padding","children","ref","autoHideDuration","mb","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","align","onSubmit","container","spacing","mt","item","xs","sm","fullWidth","onChange","displayEmpty","required","disabled","nombre_hito","label","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/Proyectos/control_calidad/frontend/src/pages/Proyectos/Hitos.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Box, TextField, Button, Grid, Typography, MenuItem, Select, InputLabel } from '@mui/material';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport AlertMessage from '../../components/AlertMessage'; // Importar el componente de alerta\r\nimport { isAuthenticated } from '../../utils/auth'; // Importar la función isAuthenticated\r\n\r\nconst CrearPlanDePrueba = () => {\r\n  const [showAlert, setShowAlert] = useState(null); // Estado de la alerta\r\n  const [hitos, setHitos] = useState([]); // Inicializar como array vacío\r\n  const [criterioAceptacion, setCriterioAceptacion] = useState('');\r\n  const [estadoPrueba, setEstadoPrueba] = useState('');\r\n  const [estadonuevoHito, serEstadonuevoHito] = useState('');\r\n  const [imagenPrueba, setImagenPrueba] = useState(null); // Estado para el archivo de imagen\r\n  const [hitoSeleccionado, setHitoSeleccionado] = useState('');  // Valor vacío como predeterminado\r\n  const [descripcionHito, setDescripcionHito] = useState(''); // Descripción del hito\r\n  const [formularioHabilitado, setFormularioHabilitado] = useState(false); // Estado para habilitar solo los campos debajo del primer botón\r\n  const navigate = useNavigate();\r\n  const { id } = useParams(); // Obtener el ID del proyecto desde la URL\r\n\r\n  const alertRef = useRef(null); // Crear una referencia para la alerta\r\n\r\n  // Verificar si el usuario está autenticado al cargar el componente\r\n  useEffect(() => {\r\n    if (!isAuthenticated()) {\r\n      navigate('/login'); // Redirige al login si no está autenticado\r\n    }\r\n  }, [navigate]);\r\n\r\n  \r\n\r\n\r\n  // Obtener los hitos de la API\r\n  useEffect(() => {\r\n    const fetchHitos = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/pruebas/hitosporPruebas/${id}`);\r\n        setHitos(response.data || []); // Asegúrate de que siempre sea un array\r\n      } catch (error) {\r\n        console.error('Error al obtener los hitos:', error);\r\n        setShowAlert({\r\n          severity: 'error',\r\n          message: 'Hubo un error al cargar los hitos del proyecto.',\r\n        });\r\n      }\r\n    };\r\n\r\n    if (id) {\r\n      fetchHitos();\r\n    }\r\n  }, [id]);\r\n\r\n  // Función para manejar el envío del formulario\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!hitoSeleccionado || !resultadoEsperado || !pruebaRealizada || !estadoPrueba || !criterioAceptacion) {\r\n      setShowAlert({\r\n        severity: 'error',\r\n        message: 'Todos los campos del plan de prueba son obligatorios.',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const planDePrueba = {\r\n      hitoSeleccionado,\r\n      estadonuevoHito,\r\n      resultadoEsperado,\r\n      pruebaRealizada,\r\n      estadoPrueba,\r\n      criterioAceptacion,\r\n      imagenPrueba, // Aquí se envía como Base64\r\n    };\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        setShowAlert({\r\n          severity: 'error',\r\n          message: 'No se encontró el token de autenticación.',\r\n        });\r\n        return;\r\n      }\r\n\r\n      const config = {\r\n        headers: {\r\n          'x-auth-token': token,\r\n          'Content-Type': 'application/json', // Asegúrate de usar JSON\r\n        },\r\n      };\r\n\r\n      const response = await axios.post(\r\n        `http://localhost:5000/api/pruebas/registerPrueba/${id}`,\r\n        planDePrueba,\r\n        config\r\n      );\r\n\r\n      if (response.data.msg) {\r\n        setShowAlert({ severity: 'success', message: response.data.msg });\r\n        setTimeout(() => navigate('/proyectos/tareas'), 2000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al crear el plan de prueba:', error.response || error);\r\n      if (error.response && error.response.data && error.response.data.errors) {\r\n        const errorMessages = error.response.data.errors.map(err => err.msg).join(', ');\r\n        setShowAlert({\r\n          severity: 'error',\r\n          message: errorMessages,\r\n        });\r\n      } else {\r\n        setShowAlert({\r\n          severity: 'error',\r\n          message: 'Hubo un error al crear el plan de prueba. Inténtalo de nuevo.',\r\n        });\r\n      }\r\n    } finally {\r\n      // Desplazar la vista hacia la alerta\r\n      if (alertRef.current) {\r\n        alertRef.current.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Habilitar solo los campos debajo del primer botón\r\n  const handleEnableForm = () => {\r\n    setFormularioHabilitado(true);\r\n  };\r\n\r\n  // Manejar la selección de un hito\r\n  const handleHitoSeleccionado = async (e) => {\r\n    const hitoId = e.target.value;\r\n    setHitoSeleccionado(hitoId);\r\n\r\n    // Obtener la descripción del hito seleccionado\r\n    const hito = hitos.find((hito) => hito.id_hito === hitoId);\r\n    if (hito) {\r\n      setDescripcionHito(hito.descripcion);\r\n    } else {\r\n      setDescripcionHito('');\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Box sx={{ padding: 5 }}>\r\n      <div ref={alertRef}>\r\n        {showAlert && (\r\n          <AlertMessage\r\n            severity={showAlert.severity}\r\n            message={showAlert.message}\r\n            autoHideDuration={2000}\r\n            sx={{ mb: 4 }}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <Typography variant=\"h4\" gutterBottom align=\"center\">\r\n        Test Plan\r\n      </Typography>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <Grid container spacing={2} mt={3}>\r\n          <Grid item xs={12} sm={12}>\r\n            <InputLabel>Selecciona un Hito</InputLabel>\r\n            <Select\r\n              fullWidth\r\n              value={hitoSeleccionado}\r\n              onChange={handleHitoSeleccionado}\r\n              displayEmpty // Para mostrar el placeholder aunque no se haya seleccionado nada\r\n              required\r\n            >\r\n              <MenuItem value=\"\" disabled>Selecciona un hito...</MenuItem> {/* Este es el placeholder */}\r\n              {hitos.map((hito) => (\r\n                <MenuItem key={hito.id_hito} value={hito.id_hito}>\r\n                  {hito.nombre_hito}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Descripción del Plan de Prueba\"\r\n              value={descripcionHito}\r\n              disabled={true}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Button variant=\"contained\" fullWidth onClick={handleEnableForm}>\r\n              Ver casos\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CrearPlanDePrueba;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}