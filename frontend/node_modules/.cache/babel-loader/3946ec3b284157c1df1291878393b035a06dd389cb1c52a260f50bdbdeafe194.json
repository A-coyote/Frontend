{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\Proyectos\\\\control_calidad\\\\frontend\\\\src\\\\components\\\\DashboardChart.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardCharts = () => {\n  _s();\n  const [proyectos, setProyectos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const token = localStorage.getItem('token');\n  const isAuthenticated = Boolean(token);\n  const fetchProyectos = useCallback(async () => {\n    if (!isAuthenticated) return;\n    const decoded = jwtDecode(token);\n    const id = decoded.user.id;\n    try {\n      // Hacer una solicitud GET a la API para obtener los proyectos\n      const response = await axios.get(`http://localhost:5000/api/grafica/VencimientoProyecto/${id}`);\n      console.log('Proyectos:', response.data); // Verifica los datos que llegan de la API\n\n      const {\n        labels,\n        datasets\n      } = response.data;\n      setProyectos({\n        labels,\n        datasets\n      });\n      setLoading(false);\n    } catch (error) {\n      console.error('Error al obtener los proyectos:', error);\n      setLoading(false);\n    }\n  }, [isAuthenticated, token]);\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchProyectos();\n    }\n  }, [isAuthenticated, fetchProyectos]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 25\n  }, this);\n  if (!proyectos.labels || !proyectos.datasets || proyectos.labels.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No hay datos para mostrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Prepara los datos para la gráfica\n  const chartData = {\n    labels: proyectos.labels,\n    // Fechas de finalización\n    datasets: [{\n      label: 'Proyectos',\n      data: proyectos.datasets.map(proyectos => proyectos),\n      // Los nombres de los proyectos\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Proyectos por Fecha de Finalizaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(DashboardCharts, \"zyXFjyp3nqU+q0hF3T7yAyatDTk=\");\n_c = DashboardCharts;\nvar _c;\n$RefreshReg$(_c, \"DashboardCharts\");","map":{"version":3,"names":["DashboardCharts","_s","proyectos","setProyectos","useState","loading","setLoading","token","localStorage","getItem","isAuthenticated","Boolean","fetchProyectos","useCallback","decoded","jwtDecode","id","user","response","axios","get","console","log","data","labels","datasets","error","useEffect","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","length","chartData","label","map","backgroundColor","borderColor","borderWidth","Bar","_c","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/Proyectos/control_calidad/frontend/src/components/DashboardChart.js"],"sourcesContent":["const DashboardCharts = () => {\r\n    const [proyectos, setProyectos] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const token = localStorage.getItem('token');\r\n    const isAuthenticated = Boolean(token);\r\n\r\n    const fetchProyectos = useCallback(async () => {\r\n        if (!isAuthenticated) return;\r\n\r\n        const decoded = jwtDecode(token);\r\n        const id = decoded.user.id;\r\n\r\n        try {\r\n            // Hacer una solicitud GET a la API para obtener los proyectos\r\n            const response = await axios.get(`http://localhost:5000/api/grafica/VencimientoProyecto/${id}`);\r\n            console.log('Proyectos:', response.data); // Verifica los datos que llegan de la API\r\n\r\n            const { labels, datasets } = response.data;\r\n            setProyectos({ labels, datasets });\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error('Error al obtener los proyectos:', error);\r\n            setLoading(false);\r\n        }\r\n    }, [isAuthenticated, token]);\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            fetchProyectos();\r\n        }\r\n    }, [isAuthenticated, fetchProyectos]);\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n\r\n    if (!proyectos.labels || !proyectos.datasets || proyectos.labels.length === 0) {\r\n        return <div>No hay datos para mostrar</div>;\r\n    }\r\n\r\n    // Prepara los datos para la gráfica\r\n    const chartData = {\r\n        labels: proyectos.labels, // Fechas de finalización\r\n        datasets: [\r\n            {\r\n                label: 'Proyectos',\r\n                data: proyectos.datasets.map((proyectos) => proyectos), // Los nombres de los proyectos\r\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Proyectos por Fecha de Finalización</h2>\r\n            <Bar data={chartData} />\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}