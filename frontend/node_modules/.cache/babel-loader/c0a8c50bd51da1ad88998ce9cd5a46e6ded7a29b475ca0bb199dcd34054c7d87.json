{"ast":null,"code":"// import jwtDecode from 'jwt-decode';\n// // Función que obtiene el nombre de usuario desde el token\n// export const getUserFromToken = () => {\n//     const token = localStorage.getItem('authToken'); // Asegúrate de almacenar el token en localStorage cuando el usuario inicie sesión\n//     if (token) {\n//         const decodedToken = jwtDecode(token);\n//         return decodedToken.user.username; // Extrae el nombre de usuario del token\n//     }\n//     return null;\n// };\n// frontend/src/utils/auth.js\nimport{jwtDecode}from'jwt-decode';// Esta función obtiene el token desde localStorage\nexport const getAuthToken=()=>{return localStorage.getItem('token');// Asumimos que el token se guarda con la clave 'token'\n};// Esta función verifica si el token está presente y es válido\nexport const isAuthenticated=()=>{const token=getAuthToken();if(token){try{const decodedToken=jwtDecode(token);// Validar que el token no esté expirado (si el token contiene una propiedad 'exp')\nconst expirationTime=decodedToken.exp*1000;if(Date.now()<expirationTime){return true;}}catch(error){console.error('Error decodificando el token:',error);}}return false;// Si no hay token o el token está expirado, no está autenticado\n};// Esta función obtiene el nombre de usuario del token\nexport const getUserFromToken=()=>{const token=getAuthToken();if(token){try{const decodedToken=jwtDecode(token);return decodedToken.user.username;// Extrae el nombre de usuario desde el token\n}catch(error){console.error('Error al decodificar el token:',error);}}return null;};// Esta función puede ser utilizada para cerrar sesión (eliminando el token)\nexport const logout=()=>{localStorage.removeItem('token');};","map":{"version":3,"names":["jwtDecode","getAuthToken","localStorage","getItem","isAuthenticated","token","decodedToken","expirationTime","exp","Date","now","error","console","getUserFromToken","user","username","logout","removeItem"],"sources":["C:/Users/Administrador/Documents/Proyectos/control_calidad/frontend/src/utils/auth.js"],"sourcesContent":["// import jwtDecode from 'jwt-decode';\r\n\r\n// // Función que obtiene el nombre de usuario desde el token\r\n// export const getUserFromToken = () => {\r\n//     const token = localStorage.getItem('authToken'); // Asegúrate de almacenar el token en localStorage cuando el usuario inicie sesión\r\n//     if (token) {\r\n//         const decodedToken = jwtDecode(token);\r\n//         return decodedToken.user.username; // Extrae el nombre de usuario del token\r\n//     }\r\n//     return null;\r\n// };\r\n\r\n\r\n\r\n\r\n// frontend/src/utils/auth.js\r\n\r\nimport {jwtDecode} from 'jwt-decode';\r\n\r\n// Esta función obtiene el token desde localStorage\r\nexport const getAuthToken = () => {\r\n    return localStorage.getItem('token'); // Asumimos que el token se guarda con la clave 'token'\r\n};\r\n\r\n// Esta función verifica si el token está presente y es válido\r\nexport const isAuthenticated = () => {\r\n    const token = getAuthToken();\r\n    if (token) {\r\n        try {\r\n            const decodedToken = jwtDecode(token);\r\n            // Validar que el token no esté expirado (si el token contiene una propiedad 'exp')\r\n            const expirationTime = decodedToken.exp * 1000;\r\n            if (Date.now() < expirationTime) {\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error decodificando el token:', error);\r\n        }\r\n    }\r\n    return false; // Si no hay token o el token está expirado, no está autenticado\r\n};\r\n\r\n// Esta función obtiene el nombre de usuario del token\r\nexport const getUserFromToken = () => {\r\n    const token = getAuthToken();\r\n    if (token) {\r\n        try {\r\n            const decodedToken = jwtDecode(token);\r\n            return decodedToken.user.username; // Extrae el nombre de usuario desde el token\r\n        } catch (error) {\r\n            console.error('Error al decodificar el token:', error);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n// Esta función puede ser utilizada para cerrar sesión (eliminando el token)\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n};\r\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA,OAAQA,SAAS,KAAO,YAAY,CAEpC;AACA,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CAC9B,MAAO,CAAAC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE;AAC1C,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CACjC,KAAM,CAAAC,KAAK,CAAGJ,YAAY,CAAC,CAAC,CAC5B,GAAII,KAAK,CAAE,CACP,GAAI,CACA,KAAM,CAAAC,YAAY,CAAGN,SAAS,CAACK,KAAK,CAAC,CACrC;AACA,KAAM,CAAAE,cAAc,CAAGD,YAAY,CAACE,GAAG,CAAG,IAAI,CAC9C,GAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGH,cAAc,CAAE,CAC7B,MAAO,KAAI,CACf,CACJ,CAAE,MAAOI,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACzD,CACJ,CACA,MAAO,MAAK,CAAE;AAClB,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,gBAAgB,CAAGA,CAAA,GAAM,CAClC,KAAM,CAAAR,KAAK,CAAGJ,YAAY,CAAC,CAAC,CAC5B,GAAII,KAAK,CAAE,CACP,GAAI,CACA,KAAM,CAAAC,YAAY,CAAGN,SAAS,CAACK,KAAK,CAAC,CACrC,MAAO,CAAAC,YAAY,CAACQ,IAAI,CAACC,QAAQ,CAAE;AACvC,CAAE,MAAOJ,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CAC1D,CACJ,CACA,MAAO,KAAI,CACf,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,MAAM,CAAGA,CAAA,GAAM,CACxBd,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC,CACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}