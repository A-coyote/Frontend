{"ast":null,"code":"// import jwtDecode from 'jwt-decode';\n\n// // Función que obtiene el nombre de usuario desde el token\n// export const getUserFromToken = () => {\n//     const token = localStorage.getItem('authToken'); // Asegúrate de almacenar el token en localStorage cuando el usuario inicie sesión\n//     if (token) {\n//         const decodedToken = jwtDecode(token);\n//         return decodedToken.user.username; // Extrae el nombre de usuario del token\n//     }\n//     return null;\n// };\n\n// frontend/src/utils/auth.js\n\nimport jwtDecode from 'jwt-decode';\n\n// Esta función obtiene el token desde localStorage\nexport const getAuthToken = () => {\n  return localStorage.getItem('token'); // Asumimos que el token se guarda con la clave 'token'\n};\n\n// Esta función verifica si el token está presente y es válido\nexport const isAuthenticated = () => {\n  const token = getAuthToken();\n  if (token) {\n    try {\n      const decodedToken = jwtDecode(token);\n      // Validar que el token no esté expirado (si el token contiene una propiedad 'exp')\n      const expirationTime = decodedToken.exp * 1000;\n      if (Date.now() < expirationTime) {\n        return true;\n      }\n    } catch (error) {\n      console.error('Error decodificando el token:', error);\n    }\n  }\n  return false; // Si no hay token o el token está expirado, no está autenticado\n};\n\n// Esta función obtiene el nombre de usuario del token\nexport const getUserFromToken = () => {\n  const token = getAuthToken();\n  if (token) {\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.user.username; // Extrae el nombre de usuario desde el token\n    } catch (error) {\n      console.error('Error al decodificar el token:', error);\n    }\n  }\n  return null;\n};\n\n// Esta función puede ser utilizada para cerrar sesión (eliminando el token)\nexport const logout = () => {\n  localStorage.removeItem('token');\n};","map":{"version":3,"names":["jwtDecode","getAuthToken","localStorage","getItem","isAuthenticated","token","decodedToken","expirationTime","exp","Date","now","error","console","getUserFromToken","user","username","logout","removeItem"],"sources":["C:/Users/Administrador/Documents/Proyectos/control_calidad/frontend/src/utils/auth.js"],"sourcesContent":["// import jwtDecode from 'jwt-decode';\r\n\r\n// // Función que obtiene el nombre de usuario desde el token\r\n// export const getUserFromToken = () => {\r\n//     const token = localStorage.getItem('authToken'); // Asegúrate de almacenar el token en localStorage cuando el usuario inicie sesión\r\n//     if (token) {\r\n//         const decodedToken = jwtDecode(token);\r\n//         return decodedToken.user.username; // Extrae el nombre de usuario del token\r\n//     }\r\n//     return null;\r\n// };\r\n\r\n\r\n\r\n\r\n// frontend/src/utils/auth.js\r\n\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n// Esta función obtiene el token desde localStorage\r\nexport const getAuthToken = () => {\r\n    return localStorage.getItem('token'); // Asumimos que el token se guarda con la clave 'token'\r\n};\r\n\r\n// Esta función verifica si el token está presente y es válido\r\nexport const isAuthenticated = () => {\r\n    const token = getAuthToken();\r\n    if (token) {\r\n        try {\r\n            const decodedToken = jwtDecode(token);\r\n            // Validar que el token no esté expirado (si el token contiene una propiedad 'exp')\r\n            const expirationTime = decodedToken.exp * 1000;\r\n            if (Date.now() < expirationTime) {\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error decodificando el token:', error);\r\n        }\r\n    }\r\n    return false; // Si no hay token o el token está expirado, no está autenticado\r\n};\r\n\r\n// Esta función obtiene el nombre de usuario del token\r\nexport const getUserFromToken = () => {\r\n    const token = getAuthToken();\r\n    if (token) {\r\n        try {\r\n            const decodedToken = jwtDecode(token);\r\n            return decodedToken.user.username; // Extrae el nombre de usuario desde el token\r\n        } catch (error) {\r\n            console.error('Error al decodificar el token:', error);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n// Esta función puede ser utilizada para cerrar sesión (eliminando el token)\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA,OAAOA,SAAS,MAAM,YAAY;;AAElC;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAC9B,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACjC,MAAMC,KAAK,GAAGJ,YAAY,CAAC,CAAC;EAC5B,IAAII,KAAK,EAAE;IACP,IAAI;MACA,MAAMC,YAAY,GAAGN,SAAS,CAACK,KAAK,CAAC;MACrC;MACA,MAAME,cAAc,GAAGD,YAAY,CAACE,GAAG,GAAG,IAAI;MAC9C,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,cAAc,EAAE;QAC7B,OAAO,IAAI;MACf;IACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD;EACJ;EACA,OAAO,KAAK,CAAC,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAGA,CAAA,KAAM;EAClC,MAAMR,KAAK,GAAGJ,YAAY,CAAC,CAAC;EAC5B,IAAII,KAAK,EAAE;IACP,IAAI;MACA,MAAMC,YAAY,GAAGN,SAAS,CAACK,KAAK,CAAC;MACrC,OAAOC,YAAY,CAACQ,IAAI,CAACC,QAAQ,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAC1D;EACJ;EACA,OAAO,IAAI;AACf,CAAC;;AAED;AACA,OAAO,MAAMK,MAAM,GAAGA,CAAA,KAAM;EACxBd,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}